# src/config/mcp.yml
# Configuration for connecting to external Model Context Protocol (MCP) servers 
# and declaring the tools they provide.

mcp_servers:
  # --- Server Definitions --- 
  # Each key is a unique server identifier (mcp_server_name)

  example_mcp_server_1: # Key is the mcp_server_name
    description: "Example MCP server running locally via HTTP"
    url: "http://localhost:8081/mcp" # URL for the MCP endpoint (HTTP/HTTPS/WS/WSS)
    # auth: (Optional) - Define if authentication is needed
    #   type: "bearer" 
    #   token_env_var: "EXAMPLE_SERVER_1_TOKEN" # Environment variable name
    provides_tools:
      - name: "mcp_tool_x"
        description: "Description for MCP tool X."
        inputSchema: # Placeholder schema
          type: object
          properties:
            param1:
              type: string
        required: [param1]
        speed: "medium"
        safety: "external"
      - name: "mcp_tool_y"
        description: "Description for MCP tool Y."
        inputSchema: {}
        speed: "slow"
        safety: "external"

  # --- Example Servers (Update URLs and potentially add auth) --- 
  # These require actual URLs for running MCP servers (local or remote).
  
  brave_search_server:
    description: "Server for Brave Search (Requires running server)"
    url: "http://localhost:8082/mcp" # Placeholder: Update with actual URL
    # auth: # Example if authentication is needed
    #   type: "bearer"
    #   token_env_var: "BRAVE_MCP_TOKEN" 
    provides_tools:
      - name: "brave_search" # Actual tool name might differ
        description: "Web and local search using Brave's Search API."
        inputSchema: { "type": "object", "properties": { "query": { "type": "string" } }, "required": ["query"] } # Placeholder
        speed: "medium"
        safety: "external"

  filesystem_server:
    description: "Server for Filesystem Operations (Requires running server)"
    url: "http://localhost:8083/mcp" # Placeholder: Update with actual URL
    # Note: Filesystem server might need startup args configured *on the server side* 
    # to specify allowed paths, rather than client-side config.
    provides_tools:
      - name: "fs_read_file"
        description: "Read content from an allowed file."
        inputSchema: { "type": "object", "properties": { "path": { "type": "string" } }, "required": ["path"] } # Placeholder
        speed: "fast"
        safety: "external"
      - name: "fs_write_file"
        description: "Write content to an allowed file."
        inputSchema: { "type": "object", "properties": { "path": { "type": "string" }, "content": { "type": "string" } }, "required": ["path", "content"] } # Placeholder
        speed: "fast"
        safety: "external"
      # Add list_dir, etc. based on actual server tools

  # --- Example WebSocket Server ---
  websocket_example_server:
    description: "Example server using WebSocket transport (Requires running server)"
    url: "ws://localhost:9000/mcp" # Placeholder: Update with actual WS/WSS URL
    provides_tools:
     - name: "websocket_tool_example"
       description: "An example tool via WebSocket."
       inputSchema: {}
       speed: "medium"
       safety: "external"

  # Add Fetch, EverArt, Google Drive, Maps, Memory, Puppeteer servers similarly
  # Ensure the tool names, descriptions, and schemas match the actual MCP server implementations.
  # Update the 'url' field for each server based on where it is running.
  # Add 'auth' section if required by the server.

# Add more tool definitions here as needed 